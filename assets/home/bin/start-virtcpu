#!/bin/bash
# jalp@amplex.dk 2012

# This script should be linked into your PATH from the location
# containing the virtual cpu file hierarchy
#
# See arm9/documentation/build-x86-release on how to build an x86 release
#
# Once this is done, do something like this:
#    mkdir -p /opt/virtcpu/install
#    tar -C /opt/virtcpu/install -jxvf /tmp/jffs_26_my-release-17721142.tar.bz2
#    ln -s /opt/virtcpu/install/root/usr/bin/start_virtcpu ~/bin/. ||
#    ln -s /opt/virtcpu/install/root/usr/bin/start_virtcpu /usr/local/bin/

# Ubuntu notes:
# Make sure the user running it is a member of tty and dialout

# For running on a 64-bit installation, install the following packages:
#  gcc-multilib
#  libreadline5:i386
# For cross compiling additionally
#  zlib-bin zlib-bin:i386 
#  libncurses5:i386

# If i386 is not available to a:
#  sudo dpkg --add-architecture i386
#  sudo apt-get update

if [ "$1" = "" ]; then
    echo "Usage $0 <serial> <server>[:port]"
    echo "Usage $0 shell <serial>"
    echo "Usage $0 <cmd> <args>"
    exit 1
fi

cmd=$0
if [ -L $cmd ] ;then
    cmd=`readlink $cmd`
fi
basedir=""
case $cmd in
    ~*)
        ;;
    \$*)
        ;;
    /*)
        ;;
    *)
        basedir=`pwd`/;
        ;;
esac

dir=${basedir}`dirname $cmd`
pos="virtcpu/install/root/usr/bin"

for d in $dir $dir/$pos /opt/$pos /home/$pos /usr/local/$pos ;do
    if [ -x $d/virtcpu ] ;then
        cmd=''
        if [[ "$1" = "shell" || -x $d/virtcpu-$1 ]] ;then
            cmd=virtcpu-$1
            shift 
        elif [[ $1 =~ ^[0-9][0-9]*$ ]] ;then
            cmd="virtcpu-run"
        fi
        echo START: $d/virtcpu $cmd "$@"
        exec $d/virtcpu $cmd "$@"
    fi
done
echo "Cannot find virtcpu in any of $dir $dir/$pos /opt/$pos /home/$pos /usr/local/$pos"
echo "See the comments in this scripts on how to build and install an x86 release."
exit 1
